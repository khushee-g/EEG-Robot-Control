{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hello","title":"Hello!","text":"<p>Welcome to the EEG Robot Control webpage. Here, I\u2019ll cover how to control a M-Bot with EEG(electroencephalography) signals from start to finish. If you would like to follow along, check out the step-but-step YouTube tutorial or my GitHub repository.</p>"},{"location":"#inception","title":"Inception","text":"<p>This project started after I first began using a Muse EEG headband. The headset was designed for tracking sleep quality, but when used with third-party apps, I could use it to acquire raw EEG data in real time. Doing so, I saw my own brain waves being captured, and I became curious to learn more. </p> <p>My first EEG work was focused on analyzing biomarkers in the eyes-closed and eyes-open state, and through this I found that the brain exhibits increased delta wave activity as we relax and close our eyes. This was my first step towards understanding EEG, but I still had yet to apply this technology towards something fascinating. </p> <p>That\u2019s when I came across the Neuralink 2025 Summer update. Whitenessing how brain chips are now being integrated with robotic arms to help disabled people draw, I had an idea of what I could integrate EEG with\u2014robotics! Thus originated this project, a system which relies solely on EEG input to control the stop and go motor commands of an m-Bot.</p>"},{"location":"#mission-statement","title":"Mission Statement:","text":"<p>As I worked on this project, my goal became to create a simplified BCI(Brain Computer Interface) with basic EEG equipment. Pivoting from the $300+ commercial EEG headband to a more DIY setup, I wanted to create a system that could make EEG and BCI related projects more affordable and accessible. </p> <p>This project is geared towards students, so that we can bridge the gap between neuroscience and robotics through easy to follow, exciting projects. Ultimately, through this project, I hope more students can gain exposure and develop an interest for BCI and the future of technology!</p> <p>If you have any questions or ideas on this project, feel free to reach out. I would love to connect!</p>"},{"location":"getting-started/","title":"EEG-Robot-Control","text":"<p>EEG-Robot Control is a project that uses real-time EEG signals to control a robot based on the user's state of alertness.</p>"},{"location":"getting-started/#how-it-works","title":"How It Works","text":""},{"location":"getting-started/#user-states","title":"User States","text":"<ul> <li>Alert (eyes open) \u2192 Robot moves forward  </li> <li>Rest (eyes closed / theta detected) \u2192 Robot stops  </li> </ul> <p>By filtering EEG data in the 4\u20138 Hz (theta) band, the system distinguishes between alert and resting states and translates them into motor commands for the robot.</p>"},{"location":"getting-started/#eeg-signal-acquisition","title":"EEG Signal Acquisition","text":"<ul> <li>3 gel electrodes (stick-on)  </li> <li>EXG Pill amplifier  </li> <li>Arduino Uno for data capture  </li> </ul>"},{"location":"getting-started/#signal-processing","title":"Signal Processing","text":"<ul> <li><code>serial-read-theta.py</code> filters EEG for 4\u20138 Hz activity  </li> <li>If theta detected, writes <code>stop</code> to a motor command file  </li> <li>Else, writes <code>go</code> </li> </ul>"},{"location":"getting-started/#robot-control","title":"Robot Control","text":"<ul> <li><code>mbot-motor-control.py</code> reads the command file  </li> <li>Sends the appropriate motor commands to the robot (mBot) via serial  </li> </ul>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>Python 3.x  </li> <li>NumPy, SciPy  </li> <li>Arduino Uno + EXG Pill  </li> <li>mBot (MakerBlock)  </li> <li>EEG electrodes (3 gel stick-on)  </li> </ul>"},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<ol> <li>Run <code>serial-read-theta.py</code> to begin capturing EEG and writing commands.  </li> <li>In a separate terminal, run <code>mbot-motor-control.py</code> to control robot motors.  </li> <li>Close your eyes \u2192 robot stops  </li> <li>Stay alert (eyes open) \u2192 robot moves  </li> </ol>"},{"location":"hardware/","title":"Hardware Setup","text":""},{"location":"hardware/#materials","title":"Materials","text":"<ul> <li>Gel Electrodes (3 per use)</li> <li>3 Snap-fit Wires</li> <li>BioAmp EXG Pill by Upside Down Labs</li> <li>3 Male-Female Jumper Wires</li> <li>Arduino Uno</li> <li>2 USB Type-B Cables</li> </ul>"},{"location":"hardware/#electronics-setup","title":"Electronics Setup","text":"<p>To set up the EEG system, start by connecting the electrodes to the snap-fit cables, and connect the free ends to the BioAmp EXG Pill. I used red, black, and yellow cables to represent IN+, IN-, and REF respectively.  </p> <p>Next, connect the BioAmp EXG Pill to the Arduino Uno board using the male-female jumper wires. Connect the yellow wire from the output pin to the A0 Analog Input port on the Arduino; connect the black wire from the ground pin to the ground port on the Arduino; and connect the red wire from the VCC (power) pin to the 5V port.  </p> <p>Here is the complete connection setup:</p> <p></p> <p>Now connect the USB cable from the Arduino board to your computer, so that the EEG signal can be processed.  </p> <p>Connect the second USB cable from your computer to the M-Bot, in order to send the robot real-time motor commands based on the EEG input. Alternatively, you can connect to the M-Bot via Bluetooth.</p> <p></p>"},{"location":"software/","title":"Software Setup","text":""},{"location":"software/#serial-read-thetapy-eeg-signal-processing","title":"<code>serial-read-theta.py</code> \u2013 EEG Signal Processing","text":"<p>This program reads real-time EEG data from the Arduino/EXG setup, filters for theta band activity (4\u20138 Hz), and writes motor commands (<code>go</code> / <code>stop</code>) to a file for the robot to read. \u26a0\ufe0f Important:** Change the <code>serial_port</code> variable to match your Arduino\u2019s port on your computer.</p>"},{"location":"software/#full-code","title":"Full Code","text":"<pre><code>import serial\nimport time\nimport numpy as np\nimport csv\nfrom scipy.signal import butter, lfilter\nfrom scipy.fft import fft, fftfreq\nfrom collections import deque\nfrom datetime import datetime\n\n# Sampling settings\nsampling_rate = 256   \nsampling_interval = 1.0 / sampling_rate\nwindow_size = 256     \nlowcut = 4.0          \nhighcut = 8.0\n\n# Serial port (update to your Arduino's port)\nserial_port = \"/dev/cu.usbmodem1422401\"\nbaudrate = 115200\ntimeout = 1\n\n# CSV file to log data\ncsv_file = open(\"eeg_buzz_log.csv\", \"w\", newline=\"\")\ncsv_writer = csv.writer(csv_file)\ncsv_writer.writerow([\"Timestamp\", \"EEG Value\", \"Dominant Frequency\", \"Command\"])\n\ndef butter_bandpass(lowcut, highcut, fs, order=4):\n    nyq = 0.5 * fs\n    low = lowcut / nyq\n    high = highcut / nyq\n    return butter(order, [low, high], btype='band')\n\ndef apply_filter(data, lowcut, highcut, fs):\n    b, a = butter_bandpass(lowcut, highcut, fs)\n    return lfilter(b, a, data)\n\ntry:\n    ser = serial.Serial(serial_port, baudrate, timeout=timeout)\n    print(f\"Connected to serial port: {serial_port}\")\nexcept Exception as e:\n    print(f\"Could not open serial port: {e}\")\n    exit(1)\n\ndata_buffer = deque(maxlen=window_size)\n\n# Clear motor command file\nwith open(\"motor_command.txt\", \"w\") as f:\n    f.write(\"\")\n\ntry:\n    while True:\n        start_time = time.time()\n\n        line = ser.readline().decode(\"utf-8\", errors=\"replace\").strip()\n        if not line:\n            continue\n\n        try:\n            parts = line.split(',')\n            eeg_value = float(parts[0])\n        except (ValueError, IndexError):\n            continue\n\n        data_buffer.append(eeg_value)\n\n        if len(data_buffer) == window_size:\n            raw_data = np.array(data_buffer)\n            filtered = apply_filter(raw_data, lowcut, highcut, sampling_rate)\n\n            yf = np.abs(fft(filtered))\n            freqs = fftfreq(window_size, d=sampling_interval)\n\n            yf = yf[:window_size // 2]\n            freqs = freqs[:window_size // 2]\n\n            dominant_freq = freqs[np.argmax(yf)]\n\n            if 4 &lt;= dominant_freq &lt;= 8:\n                command = \"stop\"\n                print(f\"\ud83d\uded1 STOP | Dominant freq: {dominant_freq:.2f} Hz\")\n            else:\n                command = \"go\"\n                print(f\"\u2705 GO | Dominant freq: {dominant_freq:.2f} Hz\")\n\n            with open(\"motor_command.txt\", \"w\") as f:\n                f.write(command)\n\n            timestamp = datetime.now().isoformat()\n            csv_writer.writerow([timestamp, eeg_value, f\"{dominant_freq:.2f}\", command])\n            csv_file.flush()\n\n        elapsed = time.time() - start_time\n        time.sleep(max(0, sampling_interval - elapsed))\n\nexcept KeyboardInterrupt:\n    print(\"Program stopped by user.\")\n\nfinally:\n    csv_file.close()\n    if ser.is_open:\n        ser.close()\n    print(\"Serial port and file closed.\")\n</code></pre>"},{"location":"software/#mbot-motor-controlpy-robot-control","title":"<code>mbot-motor-control.py</code> \u2013 Robot Control","text":"<p>This program reads the motor_command.txt file and sends corresponding motor commands to the mBot via serial. \u26a0\ufe0f Important: Update serial_port to match your mBot\u2019s connection.</p>"},{"location":"software/#full-code_1","title":"Full Code","text":"<pre><code>import serial\nimport time\n\n# Serial port to connect to mBot (update this!)\nserial_port = \"/dev/tty.usbserial-142220\"\nbaudrate = 115200\n\ntry:\n    mbot = serial.Serial(serial_port, baudrate, timeout=1)\n    print(f\"Connected to mBot on {serial_port}\")\nexcept Exception as e:\n    print(f\"Error opening serial port: {e}\")\n    exit(1)\n\ndef run_motor(port, speed):\n    \"\"\"\n    port: 0x09 = left motor, 0x0A = right motor\n    speed: -255 to 255\n    \"\"\"\n    speed_bytes = speed.to_bytes(2, byteorder='little', signed=True)\n\n    packet = bytearray([\n        0xFF, 0x55,    \n        0x07,          \n        0x00,          \n        0x02,          \n        0x0A,          \n        port,          \n        speed_bytes[0],\n        speed_bytes[1]\n    ])\n\n    checksum = sum(packet[2:]) % 256\n    packet.append(checksum)\n\n    mbot.write(packet)\n\n    print(f\"Sent to port {hex(port)}: {list(packet)} (speed {speed})\")\n\ndef move_forward():\n    run_motor(0x09, -100)  \n    run_motor(0x0A, 100)\n\ndef stop_motors():\n    run_motor(0x09, 0)  \n    run_motor(0x0A, 0)\n\nlast_command = None\n\ntry:\n    while True:\n        try:\n            with open(\"motor_command.txt\", \"r\") as f:\n                command = f.read().strip().lower()\n        except FileNotFoundError:\n            command = None\n\n        if command in [\"go\", \"stop\"]:\n            if command == \"go\":\n                move_forward()\n                print(\"\u2705 GO \u2192 Moving forward\")\n            elif command == \"stop\":\n                stop_motors()\n                print(\"\ud83d\uded1 STOP \u2192 Motors stopped\")\n            last_command = command\n\n        time.sleep(0.1)\n\nexcept KeyboardInterrupt:\n    print(\"\\nProgram interrupted! Stopping motors...\")\n    stop_motors()\n    mbot.close()\n</code></pre>"}]}