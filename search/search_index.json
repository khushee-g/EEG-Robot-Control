{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EEG-Robot-Control","text":"<p>EEG-Robot Control is a project that uses real-time EEG signals to control a robot based on the user's state of alertness.</p>"},{"location":"#how-it-works","title":"How It Works","text":""},{"location":"#user-states","title":"User States","text":"<ul> <li>Alert (eyes open) \u2192 Robot moves forward  </li> <li>Rest (eyes closed / theta detected) \u2192 Robot stops  </li> </ul> <p>By filtering EEG data in the 4\u20138 Hz (theta) band, the system distinguishes between alert and resting states and translates them into motor commands for the robot.</p>"},{"location":"#eeg-signal-acquisition","title":"EEG Signal Acquisition","text":"<ul> <li>3 gel electrodes (stick-on)  </li> <li>EXG Pill amplifier  </li> <li>Arduino Uno for data capture  </li> </ul>"},{"location":"#signal-processing","title":"Signal Processing","text":"<ul> <li><code>serial-read-theta.py</code> filters EEG for 4\u20138 Hz activity  </li> <li>If theta detected, writes <code>stop</code> to a motor command file  </li> <li>Else, writes <code>go</code> </li> </ul>"},{"location":"#robot-control","title":"Robot Control","text":"<ul> <li><code>mbot-motor-control.py</code> reads the command file  </li> <li>Sends the appropriate motor commands to the robot (mBot) via serial  </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.x  </li> <li>NumPy, SciPy  </li> <li>Arduino Uno + EXG Pill  </li> <li>mBot (MakerBlock)  </li> <li>EEG electrodes (3 gel stick-on)  </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Run <code>serial-read-theta.py</code> to begin capturing EEG and writing commands.  </li> <li>In a separate terminal, run <code>mbot-motor-control.py</code> to control robot motors.  </li> <li>Close your eyes \u2192 robot stops  </li> <li>Stay alert (eyes open) \u2192 robot moves  </li> </ol>"},{"location":"hardware/","title":"Hardware Setup","text":""},{"location":"hardware/#materials","title":"Materials","text":"<ul> <li>Gel Electrodes (3 per use)</li> <li>3 Snap-fit Wires</li> <li>BioAmp EXG Pill by Upside Down Labs</li> <li>3 Male-Female Jumper Wires</li> <li>Arduino Uno</li> <li>2 USB Type-B Cables</li> </ul>"},{"location":"hardware/#electronics-setup","title":"Electronics Setup","text":"<p>To set up the EEG system, start by connecting the electrodes to the snap-fit cables, and connect the free ends to the BioAmp EXG Pill. I used red, black, and yellow cables to represent IN+, IN-, and REF respectively.  </p> <p>Next, connect the BioAmp EXG Pill to the Arduino Uno board using the male-female jumper wires. Connect the yellow wire from the output pin to the A0 Analog Input port on the Arduino; connect the black wire from the ground pin to the ground port on the Arduino; and connect the red wire from the VCC (power) pin to the 5V port.  </p> <p>Here is the complete connection setup:</p> <p></p> <p>Now connect the USB cable from the Arduino board to your computer, so that the EEG signal can be processed.  </p> <p>Connect the second USB cable from your computer to the M-Bot, in order to send the robot real-time motor commands based on the EEG input. Alternatively, you can connect to the M-Bot via Bluetooth.</p> <p></p>"},{"location":"software/","title":"Software Setup","text":"<p>This page describes the software components used in EEG-Robot-Control, highlighting the two main Python programs that drive the system.</p>"},{"location":"software/#quick-links","title":"Quick Links","text":"<ul> <li>Hardware Setup \u2013 Full list of materials and connection diagrams  </li> <li>Getting Started \u2013 How to run the system step by step  </li> </ul>"},{"location":"software/#1-serial-read-thetapy-eeg-signal-processing","title":"1. <code>serial-read-theta.py</code> \u2013 EEG Signal Processing","text":"<p>This program reads real-time EEG data from the Arduino/EXG setup, filters for theta band activity (4\u20138 Hz), and writes motor commands (<code>go</code> / <code>stop</code>) to a file for the robot to read.</p> <p>\u26a0\ufe0f Important: Change the <code>serial_port</code> variable to match your Arduino\u2019s port on your computer.</p>"},{"location":"software/#full-code","title":"Full Code","text":"<p>```python import serial import time import numpy as np import csv from scipy.signal import butter, lfilter from scipy.fft import fft, fftfreq from collections import deque from datetime import datetime</p>"},{"location":"software/#sampling-settings","title":"Sampling settings","text":"<p>sampling_rate = 256  sampling_interval = 1.0 / sampling_rate window_size = 256    lowcut = 4.0         highcut = 8.0         </p>"},{"location":"software/#serial-port-update-to-your-arduinos-port","title":"Serial port (update to your Arduino's port)","text":"<p>serial_port = \"/dev/cu.usbmodem1422401\" baudrate = 115200 timeout = 1 </p>"},{"location":"software/#csv-file-to-log-data","title":"CSV file to log data","text":"<p>csv_file = open(\"eeg_buzz_log.csv\", \"w\", newline=\"\") csv_writer = csv.writer(csv_file) csv_writer.writerow([\"Timestamp\", \"EEG Value\", \"Dominant Frequency\", \"Command\"])</p> <p>def butter_bandpass(lowcut, highcut, fs, order=4):     nyq = 0.5 * fs     low = lowcut / nyq     high = highcut / nyq     return butter(order, [low, high], btype='band')</p> <p>def apply_filter(data, lowcut, highcut, fs):     b, a = butter_bandpass(lowcut, highcut, fs)     return lfilter(b, a, data)</p> <p>try:     ser = serial.Serial(serial_port, baudrate, timeout=timeout)     print(f\"Connected to serial port: {serial_port}\") except Exception as e:     print(f\"Could not open serial port: {e}\")     exit(1)</p> <p>data_buffer = deque(maxlen=window_size)</p>"},{"location":"software/#clear-motor-command-file","title":"Clear motor command file","text":"<p>with open(\"motor_command.txt\", \"w\") as f:     f.write(\"\")</p> <p>try:     while True:         start_time = time.time()</p> <pre><code>    line = ser.readline().decode(\"utf-8\", errors=\"replace\").strip()\n    if not line:\n        continue\n\n    try:\n        parts = line.split(',')\n        eeg_value = float(parts[0])\n    except (ValueError, IndexError):\n        continue\n\n    data_buffer.append(eeg_value)\n\n    if len(data_buffer) == window_size:\n        raw_data = np.array(data_buffer)\n        filtered = apply_filter(raw_data, lowcut, highcut, sampling_rate)\n\n        yf = np.abs(fft(filtered))\n        freqs = fftfreq(window_size, d=sampling_interval)\n\n        yf = yf[:window_size // 2]\n        freqs = freqs[:window_size // 2]\n\n        dominant_freq = freqs[np.argmax(yf)]\n\n        if 4 &lt;= dominant_freq &lt;= 8:\n            command = \"stop\"\n            print(f\"\ud83d\uded1 STOP | Dominant freq: {dominant_freq:.2f} Hz\")\n        else:\n            command = \"go\"\n            print(f\"\u2705 GO | Dominant freq: {dominant_freq:.2f} Hz\")\n\n        with open(\"motor_command.txt\", \"w\") as f:\n            f.write(command)\n\n        timestamp = datetime.now().isoformat()\n        csv_writer.writerow([timestamp, eeg_value, f\"{dominant_freq:.2f}\", command])\n        csv_file.flush()\n\n    elapsed = time.time() - start_time\n    time.sleep(max(0, sampling_interval - elapsed))\n</code></pre> <p>except KeyboardInterrupt:     print(\"Program stopped by user.\")</p> <p>finally:     csv_file.close()     if ser.is_open:         ser.close()     print(\"Serial port and file closed.\")</p>"}]}